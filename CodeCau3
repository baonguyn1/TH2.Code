#include <iostream>
#include <stack>
#include <unordered_map>
#include <vector>
#include <string>
#include <cctype>
#include <stdexcept>
#include <cmath>
#include <functional>

using namespace std;

// Ham kiem tra ky tu co phai toan tu
bool laToanTu(char c) {
    return c == '&' || c == '|' || c == '!' || c == '^' || c == '>' || c == '==';
}

// Ham kiem tra ky tu co hop le
bool kyTuHopLe(char c) {
    return isalpha(c) || laToanTu(c) || c == '(' || c == ')';
}

// Ham kiem tra dau ngoac co can bang
bool ngoacCanBang(const string& expr) {
    stack<char> s;
    for (char c : expr) {
        if (c == '(') {
            s.push(c);
        } else if (c == ')') {
            if (s.empty() || s.top() != '(') {
                return false;
            }
            s.pop();
        }
    }
    return s.empty();
}

// Ham kiem tra bieu thuc hop le
bool bieuThucHopLe(const string& expr) {
    if (!ngoacCanBang(expr)) {
        return false;
    }

    for (char c : expr) {
        if (!kyTuHopLe(c) && !isspace(c)) {
            return false;
        }
    }

    return true;
}

// Ham tinh gia tri bieu thuc logic menh de
bool tinhGiaTriBieuThuc(const string& expr, const unordered_map<char, bool>& values) {
    stack<bool> operands;
    stack<char> operators;

    auto apDungToanTu = [](char op, bool operand1, bool operand2 = false) -> bool {
        switch (op) {
            case '!': return !operand1; // phep phu dinh
            case '&': return operand1 && operand2; // phep va
            case '|': return operand1 || operand2; // phep hoac
            case '^': return operand1 ^ operand2; // phep loai
            case '>': return !operand1 || operand2; // phep keo theo
            case '==': return operand1 == operand2; // phep tuong duong
            default: throw invalid_argument("Toan tu khong hop le");
        }
    };

    for (size_t i = 0; i < expr.length(); ++i) {
        char c = expr[i];

        if (isspace(c)) continue;

        if (isalpha(c)) {
            if (values.find(c) == values.end()) {
                throw invalid_argument("Bien khong duoc dinh nghia: " + string(1, c));
            }
            operands.push(values.at(c));
        } else if (c == '(') {
            operators.push(c);
        } else if (c == ')') {
            while (!operators.empty() && operators.top() != '(') {
                char op = operators.top(); operators.pop();
                bool operand1 = operands.top(); operands.pop();
                if (op == '!') {
                    operands.push(apDungToanTu(op, operand1));
                } else {
                    bool operand2 = operands.top(); operands.pop();
                    operands.push(apDungToanTu(op, operand2, operand1));
                }
            }
            if (!operators.empty() && operators.top() == '(') {
                operators.pop();
            }
        } else if (laToanTu(c)) {
            while (!operators.empty() && operators.top() != '(' &&
                   (c == '!' ? false : (operators.top() == '&' || operators.top() == '|' || operators.top() == '^' || operators.top() == '>' || operators.top() == '<'))) {
                char op = operators.top(); operators.pop();
                bool operand1 = operands.top(); operands.pop();
                if (op == '!') {
                    operands.push(apDungToanTu(op, operand1));
                } else {
                    bool operand2 = operands.top(); operands.pop();
                    operands.push(apDungToanTu(op, operand2, operand1));
                }
            }
            operators.push(c);
        }
    }

    while (!operators.empty()) {
        char op = operators.top(); operators.pop();
        bool operand1 = operands.top(); operands.pop();
        if (op == '!') {
            operands.push(apDungToanTu(op, operand1));
        } else {
            bool operand2 = operands.top(); operands.pop();
            operands.push(apDungToanTu(op, operand2, operand1));
        }
    }

    return operands.top();
}

// Ham tinh gia tri bieu thuc logic vi tu
bool tinhGiaTriLogicViTu(const string& expr, const vector<int>& domain,
                         const function<bool(int)>& P,
                         const function<bool(int)>& Q) {
    // Gia su bieu thuc chi ho tro cac phep toan cua P(x), Q(x), va cac phep toan logic.
    for (int x : domain) {
        for (int y : domain) {
            bool P_x = P(x);
            bool Q_x = Q(x);
            unordered_map<char, bool> values = {
                {'P', P_x},
                {'Q', Q_x}
            };

            if (!tinhGiaTriBieuThuc(expr, values)) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    string expression;
    cout << "Nhap bieu thuc logic vi tu: ";
    getline(cin, expression);

    if (!bieuThucHopLe(expression)) {
        cout << "Bieu thuc khong hop le." << endl;
        return 1;
    }

    int n;
    cout << "Nhap kich thuoc mien gia tri: ";
    cin >> n;

    vector<int> domain(n);
    cout << "Nhap cac gia tri trong mien: ";
    for (int i = 0; i < n; ++i) {
        cin >> domain[i];
    }

    auto P = [](int x) { return x > 1; };
    auto Q = [](int x) { return x % 2 == 0; };

    bool result = tinhGiaTriLogicViTu(expression, domain, P, Q);
    cout << "Ket qua: " << (result ? "Dung" : "Sai") << endl;

    return 0;
}
